/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"PollManager","structs":{"PollData":[{"name":"id","type":"uint64"},{"name":"question","type":"string"},{"name":"option_1","type":"string"},{"name":"option_2","type":"string"},{"name":"option_3","type":"string"},{"name":"option_4","type":"string"},{"name":"option_5","type":"string"},{"name":"option_1Votes","type":"uint64"},{"name":"option_2Votes","type":"uint64"},{"name":"option_3Votes","type":"uint64"},{"name":"option_4Votes","type":"uint64"},{"name":"option_5Votes","type":"uint64"},{"name":"voters","type":"address[]"}]},"methods":[{"name":"hello","args":[{"type":"string","name":"name"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"create_poll","args":[{"type":"(uint64,string,string,string,string,string,string,uint64,uint64,uint64,uint64,uint64,address[])","struct":"PollData","name":"poll_data"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"vote_option_1","args":[{"type":"uint64","name":"poll_id"},{"type":"address","name":"caller"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"vote_option_2","args":[{"type":"uint64","name":"poll_id"},{"type":"address","name":"caller"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"vote_option_3","args":[{"type":"uint64","name":"poll_id"},{"type":"address","name":"caller"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"vote_option_4","args":[{"type":"uint64","name":"poll_id"},{"type":"address","name":"caller"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"vote_option_5","args":[{"type":"uint64","name":"poll_id"},{"type":"address","name":"caller"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"did_vote","args":[{"type":"uint64","name":"poll_id"},{"type":"address","name":"caller"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":0,"bytes":1},"local":{"ints":0,"bytes":0}},"keys":{"global":{"next_poll_id":{"keyType":"AVMString","valueType":"uint64","key":"bmV4dF9wb2xsX2lk"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"box_map_struct":{"keyType":"uint64","valueType":"PollData","prefix":"cG9sbHM="}}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[355,432,509,586,663],"errorMessage":"Already voted"},{"pc":[774],"errorMessage":"Index access is out of bounds"},{"pc":[123,152,170,188,206,224,242,257],"errorMessage":"OnCompletion is not NoOp"},{"pc":[292],"errorMessage":"can only call when creating"},{"pc":[126,155,173,191,209,227,245,260],"errorMessage":"can only call when not creating"},{"pc":[362,439,516,593,670,740],"errorMessage":"check self.box_map_struct entry exists"},{"pc":[317],"errorMessage":"check self.next_poll_id exists"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"byteCode":{"approval":"CiAEAQAgPCYDBXBvbGxzDG5leHRfcG9sbF9pZAQVH3x1MRhAAAwpgAgAAAAAAAAAAWcxG0EA5YIIBAK+zhEElXTZeARVAqebBEQ4WuUEprGfYQQXIFTbBNn6zC8EhpJqujYaAI4IAIgAeQBnAFUAQwAxAB8AAiNDMRkURDEYRDYaATYaAogCUYABACNPAlQqTFCwIkMxGRREMRhENhoBNhoCiAHnIkMxGRREMRhENhoBNhoCiAGIIkMxGRREMRhENhoBNhoCiAEpIkMxGRREMRhENhoBNhoCiADKIkMxGRREMRhENhoBNhoCiABrIkMxGRREMRhENhoBiAA7IkMxGRREMRhENhoBVwIAiAAZSRUWVwYCTFAqTFCwIkMxGUD/VTEYFEQiQ4oBAYAHSGVsbG8sIIv/UImKAQAjKWVEi/9LAVwAjP8oSwFQSbxIi/+/FyIIFilMZ4mKAgCL/ov/iAF3FEQoi/5QSb5ESYEUWyIIFlwUSwG8SEq/SSVZSwEVSwJLAk8CUlcCAIv/UEkVJAoWVwYCTFBPAiNPA1hMUEsBvEi/iYoCAIv+i/+IASoURCiL/lBJvkRJgRxbIggWXBxLAbxISr9JJVlLARVLAksCTwJSVwIAi/9QSRUkChZXBgJMUE8CI08DWExQSwG8SL+JigIAi/6L/4gA3RREKIv+UEm+REmBJFsiCBZcJEsBvEhKv0klWUsBFUsCSwJPAlJXAgCL/1BJFSQKFlcGAkxQTwIjTwNYTFBLAbxIv4mKAgCL/ov/iACQFEQoi/5QSb5ESYEsWyIIFlwsSwG8SEq/SSVZSwEVSwJLAk8CUlcCAIv/UEkVJAoWVwYCTFBPAiNPA1hMUEsBvEi/iYoCAIv+i/+IAEMURCiL/lBJvkRJgTRbIggWXDRLAbxISr9JJVlLARVLAksCTwJSVwIAi/9QSRUkChZXBgJMUE8CI08DWExQSwG8SL+JigIBgAAjKIv+UL5ESSVZSwEVUkkjWSOLBIsDDIsBjABBABSLAlcCAIsEJAskWIv/EkEABCKMAImLBCIIjARC/9Y=","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":10,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type PollData = {
  id: bigint,
  question: string,
  option_1: string,
  option_2: string,
  option_3: string,
  option_4: string,
  option_5: string,
  option_1Votes: bigint,
  option_2Votes: bigint,
  option_3Votes: bigint,
  option_4Votes: bigint,
  option_5Votes: bigint,
  voters: string[]
}


/**
 * Converts the ABI tuple representation of a PollData to the struct representation
 */
export function PollDataFromTuple(abiTuple: [bigint, string, string, string, string, string, string, bigint, bigint, bigint, bigint, bigint, string[]]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.PollData, APP_SPEC.structs) as PollData
}

/**
 * The argument types for the PollManager contract
 */
export type PollManagerArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'hello(string)string': {
      name: string
    }
    'create_poll((uint64,string,string,string,string,string,string,uint64,uint64,uint64,uint64,uint64,address[]))void': {
      pollData: PollData
    }
    'vote_option_1(uint64,address)void': {
      pollId: bigint | number
      caller: string
    }
    'vote_option_2(uint64,address)void': {
      pollId: bigint | number
      caller: string
    }
    'vote_option_3(uint64,address)void': {
      pollId: bigint | number
      caller: string
    }
    'vote_option_4(uint64,address)void': {
      pollId: bigint | number
      caller: string
    }
    'vote_option_5(uint64,address)void': {
      pollId: bigint | number
      caller: string
    }
    'did_vote(uint64,address)bool': {
      pollId: bigint | number
      caller: string
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'hello(string)string': [name: string]
    'create_poll((uint64,string,string,string,string,string,string,uint64,uint64,uint64,uint64,uint64,address[]))void': [pollData: PollData]
    'vote_option_1(uint64,address)void': [pollId: bigint | number, caller: string]
    'vote_option_2(uint64,address)void': [pollId: bigint | number, caller: string]
    'vote_option_3(uint64,address)void': [pollId: bigint | number, caller: string]
    'vote_option_4(uint64,address)void': [pollId: bigint | number, caller: string]
    'vote_option_5(uint64,address)void': [pollId: bigint | number, caller: string]
    'did_vote(uint64,address)bool': [pollId: bigint | number, caller: string]
  }
}

/**
 * The return type for each method
 */
export type PollManagerReturns = {
  'hello(string)string': string
  'create_poll((uint64,string,string,string,string,string,string,uint64,uint64,uint64,uint64,uint64,address[]))void': void
  'vote_option_1(uint64,address)void': void
  'vote_option_2(uint64,address)void': void
  'vote_option_3(uint64,address)void': void
  'vote_option_4(uint64,address)void': void
  'vote_option_5(uint64,address)void': void
  'did_vote(uint64,address)bool': boolean
}

/**
 * Defines the types of available calls and state of the PollManager smart contract.
 */
export type PollManagerTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'hello(string)string' | 'hello', {
      argsObj: PollManagerArgs['obj']['hello(string)string']
      argsTuple: PollManagerArgs['tuple']['hello(string)string']
      returns: PollManagerReturns['hello(string)string']
    }>
    & Record<'create_poll((uint64,string,string,string,string,string,string,uint64,uint64,uint64,uint64,uint64,address[]))void' | 'create_poll', {
      argsObj: PollManagerArgs['obj']['create_poll((uint64,string,string,string,string,string,string,uint64,uint64,uint64,uint64,uint64,address[]))void']
      argsTuple: PollManagerArgs['tuple']['create_poll((uint64,string,string,string,string,string,string,uint64,uint64,uint64,uint64,uint64,address[]))void']
      returns: PollManagerReturns['create_poll((uint64,string,string,string,string,string,string,uint64,uint64,uint64,uint64,uint64,address[]))void']
    }>
    & Record<'vote_option_1(uint64,address)void' | 'vote_option_1', {
      argsObj: PollManagerArgs['obj']['vote_option_1(uint64,address)void']
      argsTuple: PollManagerArgs['tuple']['vote_option_1(uint64,address)void']
      returns: PollManagerReturns['vote_option_1(uint64,address)void']
    }>
    & Record<'vote_option_2(uint64,address)void' | 'vote_option_2', {
      argsObj: PollManagerArgs['obj']['vote_option_2(uint64,address)void']
      argsTuple: PollManagerArgs['tuple']['vote_option_2(uint64,address)void']
      returns: PollManagerReturns['vote_option_2(uint64,address)void']
    }>
    & Record<'vote_option_3(uint64,address)void' | 'vote_option_3', {
      argsObj: PollManagerArgs['obj']['vote_option_3(uint64,address)void']
      argsTuple: PollManagerArgs['tuple']['vote_option_3(uint64,address)void']
      returns: PollManagerReturns['vote_option_3(uint64,address)void']
    }>
    & Record<'vote_option_4(uint64,address)void' | 'vote_option_4', {
      argsObj: PollManagerArgs['obj']['vote_option_4(uint64,address)void']
      argsTuple: PollManagerArgs['tuple']['vote_option_4(uint64,address)void']
      returns: PollManagerReturns['vote_option_4(uint64,address)void']
    }>
    & Record<'vote_option_5(uint64,address)void' | 'vote_option_5', {
      argsObj: PollManagerArgs['obj']['vote_option_5(uint64,address)void']
      argsTuple: PollManagerArgs['tuple']['vote_option_5(uint64,address)void']
      returns: PollManagerReturns['vote_option_5(uint64,address)void']
    }>
    & Record<'did_vote(uint64,address)bool' | 'did_vote', {
      argsObj: PollManagerArgs['obj']['did_vote(uint64,address)bool']
      argsTuple: PollManagerArgs['tuple']['did_vote(uint64,address)bool']
      returns: PollManagerReturns['did_vote(uint64,address)bool']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        nextPollId: bigint
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        boxMapStruct: Map<bigint | number, PollData>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type PollManagerSignatures = keyof PollManagerTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type PollManagerNonVoidMethodSignatures = keyof PollManagerTypes['methods'] extends infer T ? T extends keyof PollManagerTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the PollManager smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends PollManagerSignatures> = PollManagerTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the PollManager smart contract to the method's return type
 */
export type MethodReturn<TSignature extends PollManagerSignatures> = PollManagerTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = PollManagerTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = PollManagerTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type PollManagerCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type PollManagerDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: PollManagerCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the PollManager smart contract
 */
export abstract class PollManagerParamsFactory {
  /**
   * Constructs a no op call for the hello(string)string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static hello(params: CallParams<PollManagerArgs['obj']['hello(string)string'] | PollManagerArgs['tuple']['hello(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'hello(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name],
    }
  }
  /**
   * Constructs a no op call for the create_poll((uint64,string,string,string,string,string,string,uint64,uint64,uint64,uint64,uint64,address[]))void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createPoll(params: CallParams<PollManagerArgs['obj']['create_poll((uint64,string,string,string,string,string,string,uint64,uint64,uint64,uint64,uint64,address[]))void'] | PollManagerArgs['tuple']['create_poll((uint64,string,string,string,string,string,string,uint64,uint64,uint64,uint64,uint64,address[]))void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'create_poll((uint64,string,string,string,string,string,string,uint64,uint64,uint64,uint64,uint64,address[]))void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.pollData],
    }
  }
  /**
   * Constructs a no op call for the vote_option_1(uint64,address)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static voteOption_1(params: CallParams<PollManagerArgs['obj']['vote_option_1(uint64,address)void'] | PollManagerArgs['tuple']['vote_option_1(uint64,address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'vote_option_1(uint64,address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.pollId, params.args.caller],
    }
  }
  /**
   * Constructs a no op call for the vote_option_2(uint64,address)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static voteOption_2(params: CallParams<PollManagerArgs['obj']['vote_option_2(uint64,address)void'] | PollManagerArgs['tuple']['vote_option_2(uint64,address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'vote_option_2(uint64,address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.pollId, params.args.caller],
    }
  }
  /**
   * Constructs a no op call for the vote_option_3(uint64,address)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static voteOption_3(params: CallParams<PollManagerArgs['obj']['vote_option_3(uint64,address)void'] | PollManagerArgs['tuple']['vote_option_3(uint64,address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'vote_option_3(uint64,address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.pollId, params.args.caller],
    }
  }
  /**
   * Constructs a no op call for the vote_option_4(uint64,address)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static voteOption_4(params: CallParams<PollManagerArgs['obj']['vote_option_4(uint64,address)void'] | PollManagerArgs['tuple']['vote_option_4(uint64,address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'vote_option_4(uint64,address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.pollId, params.args.caller],
    }
  }
  /**
   * Constructs a no op call for the vote_option_5(uint64,address)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static voteOption_5(params: CallParams<PollManagerArgs['obj']['vote_option_5(uint64,address)void'] | PollManagerArgs['tuple']['vote_option_5(uint64,address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'vote_option_5(uint64,address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.pollId, params.args.caller],
    }
  }
  /**
   * Constructs a no op call for the did_vote(uint64,address)bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static didVote(params: CallParams<PollManagerArgs['obj']['did_vote(uint64,address)bool'] | PollManagerArgs['tuple']['did_vote(uint64,address)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'did_vote(uint64,address)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.pollId, params.args.caller],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the PollManager smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class PollManagerFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `PollManagerFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new PollManagerClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new PollManagerClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the PollManager smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: PollManagerDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new PollManagerClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the PollManager smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the PollManager smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the PollManager smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new PollManagerClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the PollManager smart contract
 */
export class PollManagerClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `PollManagerClient`
   *
   * @param appClient An `AppClient` instance which has been created with the PollManager app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `PollManagerClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends PollManagerNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `PollManagerClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<PollManagerClient> {
    return new PollManagerClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `PollManagerClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<PollManagerClient> {
    return new PollManagerClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the PollManager smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the PollManager smart contract using the `hello(string)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    hello: (params: CallParams<PollManagerArgs['obj']['hello(string)string'] | PollManagerArgs['tuple']['hello(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PollManagerParamsFactory.hello(params))
    },

    /**
     * Makes a call to the PollManager smart contract using the `create_poll((uint64,string,string,string,string,string,string,uint64,uint64,uint64,uint64,uint64,address[]))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createPoll: (params: CallParams<PollManagerArgs['obj']['create_poll((uint64,string,string,string,string,string,string,uint64,uint64,uint64,uint64,uint64,address[]))void'] | PollManagerArgs['tuple']['create_poll((uint64,string,string,string,string,string,string,uint64,uint64,uint64,uint64,uint64,address[]))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PollManagerParamsFactory.createPoll(params))
    },

    /**
     * Makes a call to the PollManager smart contract using the `vote_option_1(uint64,address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    voteOption_1: (params: CallParams<PollManagerArgs['obj']['vote_option_1(uint64,address)void'] | PollManagerArgs['tuple']['vote_option_1(uint64,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PollManagerParamsFactory.voteOption_1(params))
    },

    /**
     * Makes a call to the PollManager smart contract using the `vote_option_2(uint64,address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    voteOption_2: (params: CallParams<PollManagerArgs['obj']['vote_option_2(uint64,address)void'] | PollManagerArgs['tuple']['vote_option_2(uint64,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PollManagerParamsFactory.voteOption_2(params))
    },

    /**
     * Makes a call to the PollManager smart contract using the `vote_option_3(uint64,address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    voteOption_3: (params: CallParams<PollManagerArgs['obj']['vote_option_3(uint64,address)void'] | PollManagerArgs['tuple']['vote_option_3(uint64,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PollManagerParamsFactory.voteOption_3(params))
    },

    /**
     * Makes a call to the PollManager smart contract using the `vote_option_4(uint64,address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    voteOption_4: (params: CallParams<PollManagerArgs['obj']['vote_option_4(uint64,address)void'] | PollManagerArgs['tuple']['vote_option_4(uint64,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PollManagerParamsFactory.voteOption_4(params))
    },

    /**
     * Makes a call to the PollManager smart contract using the `vote_option_5(uint64,address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    voteOption_5: (params: CallParams<PollManagerArgs['obj']['vote_option_5(uint64,address)void'] | PollManagerArgs['tuple']['vote_option_5(uint64,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PollManagerParamsFactory.voteOption_5(params))
    },

    /**
     * Makes a call to the PollManager smart contract using the `did_vote(uint64,address)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    didVote: (params: CallParams<PollManagerArgs['obj']['did_vote(uint64,address)bool'] | PollManagerArgs['tuple']['did_vote(uint64,address)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PollManagerParamsFactory.didVote(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the PollManager smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the PollManager smart contract using the `hello(string)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    hello: (params: CallParams<PollManagerArgs['obj']['hello(string)string'] | PollManagerArgs['tuple']['hello(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PollManagerParamsFactory.hello(params))
    },

    /**
     * Makes a call to the PollManager smart contract using the `create_poll((uint64,string,string,string,string,string,string,uint64,uint64,uint64,uint64,uint64,address[]))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createPoll: (params: CallParams<PollManagerArgs['obj']['create_poll((uint64,string,string,string,string,string,string,uint64,uint64,uint64,uint64,uint64,address[]))void'] | PollManagerArgs['tuple']['create_poll((uint64,string,string,string,string,string,string,uint64,uint64,uint64,uint64,uint64,address[]))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PollManagerParamsFactory.createPoll(params))
    },

    /**
     * Makes a call to the PollManager smart contract using the `vote_option_1(uint64,address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    voteOption_1: (params: CallParams<PollManagerArgs['obj']['vote_option_1(uint64,address)void'] | PollManagerArgs['tuple']['vote_option_1(uint64,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PollManagerParamsFactory.voteOption_1(params))
    },

    /**
     * Makes a call to the PollManager smart contract using the `vote_option_2(uint64,address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    voteOption_2: (params: CallParams<PollManagerArgs['obj']['vote_option_2(uint64,address)void'] | PollManagerArgs['tuple']['vote_option_2(uint64,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PollManagerParamsFactory.voteOption_2(params))
    },

    /**
     * Makes a call to the PollManager smart contract using the `vote_option_3(uint64,address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    voteOption_3: (params: CallParams<PollManagerArgs['obj']['vote_option_3(uint64,address)void'] | PollManagerArgs['tuple']['vote_option_3(uint64,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PollManagerParamsFactory.voteOption_3(params))
    },

    /**
     * Makes a call to the PollManager smart contract using the `vote_option_4(uint64,address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    voteOption_4: (params: CallParams<PollManagerArgs['obj']['vote_option_4(uint64,address)void'] | PollManagerArgs['tuple']['vote_option_4(uint64,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PollManagerParamsFactory.voteOption_4(params))
    },

    /**
     * Makes a call to the PollManager smart contract using the `vote_option_5(uint64,address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    voteOption_5: (params: CallParams<PollManagerArgs['obj']['vote_option_5(uint64,address)void'] | PollManagerArgs['tuple']['vote_option_5(uint64,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PollManagerParamsFactory.voteOption_5(params))
    },

    /**
     * Makes a call to the PollManager smart contract using the `did_vote(uint64,address)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    didVote: (params: CallParams<PollManagerArgs['obj']['did_vote(uint64,address)bool'] | PollManagerArgs['tuple']['did_vote(uint64,address)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PollManagerParamsFactory.didVote(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the PollManager smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the PollManager smart contract using the `hello(string)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    hello: async (params: CallParams<PollManagerArgs['obj']['hello(string)string'] | PollManagerArgs['tuple']['hello(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PollManagerParamsFactory.hello(params))
      return {...result, return: result.return as unknown as (undefined | PollManagerReturns['hello(string)string'])}
    },

    /**
     * Makes a call to the PollManager smart contract using the `create_poll((uint64,string,string,string,string,string,string,uint64,uint64,uint64,uint64,uint64,address[]))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createPoll: async (params: CallParams<PollManagerArgs['obj']['create_poll((uint64,string,string,string,string,string,string,uint64,uint64,uint64,uint64,uint64,address[]))void'] | PollManagerArgs['tuple']['create_poll((uint64,string,string,string,string,string,string,uint64,uint64,uint64,uint64,uint64,address[]))void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PollManagerParamsFactory.createPoll(params))
      return {...result, return: result.return as unknown as (undefined | PollManagerReturns['create_poll((uint64,string,string,string,string,string,string,uint64,uint64,uint64,uint64,uint64,address[]))void'])}
    },

    /**
     * Makes a call to the PollManager smart contract using the `vote_option_1(uint64,address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    voteOption_1: async (params: CallParams<PollManagerArgs['obj']['vote_option_1(uint64,address)void'] | PollManagerArgs['tuple']['vote_option_1(uint64,address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PollManagerParamsFactory.voteOption_1(params))
      return {...result, return: result.return as unknown as (undefined | PollManagerReturns['vote_option_1(uint64,address)void'])}
    },

    /**
     * Makes a call to the PollManager smart contract using the `vote_option_2(uint64,address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    voteOption_2: async (params: CallParams<PollManagerArgs['obj']['vote_option_2(uint64,address)void'] | PollManagerArgs['tuple']['vote_option_2(uint64,address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PollManagerParamsFactory.voteOption_2(params))
      return {...result, return: result.return as unknown as (undefined | PollManagerReturns['vote_option_2(uint64,address)void'])}
    },

    /**
     * Makes a call to the PollManager smart contract using the `vote_option_3(uint64,address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    voteOption_3: async (params: CallParams<PollManagerArgs['obj']['vote_option_3(uint64,address)void'] | PollManagerArgs['tuple']['vote_option_3(uint64,address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PollManagerParamsFactory.voteOption_3(params))
      return {...result, return: result.return as unknown as (undefined | PollManagerReturns['vote_option_3(uint64,address)void'])}
    },

    /**
     * Makes a call to the PollManager smart contract using the `vote_option_4(uint64,address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    voteOption_4: async (params: CallParams<PollManagerArgs['obj']['vote_option_4(uint64,address)void'] | PollManagerArgs['tuple']['vote_option_4(uint64,address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PollManagerParamsFactory.voteOption_4(params))
      return {...result, return: result.return as unknown as (undefined | PollManagerReturns['vote_option_4(uint64,address)void'])}
    },

    /**
     * Makes a call to the PollManager smart contract using the `vote_option_5(uint64,address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    voteOption_5: async (params: CallParams<PollManagerArgs['obj']['vote_option_5(uint64,address)void'] | PollManagerArgs['tuple']['vote_option_5(uint64,address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PollManagerParamsFactory.voteOption_5(params))
      return {...result, return: result.return as unknown as (undefined | PollManagerReturns['vote_option_5(uint64,address)void'])}
    },

    /**
     * Makes a call to the PollManager smart contract using the `did_vote(uint64,address)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    didVote: async (params: CallParams<PollManagerArgs['obj']['did_vote(uint64,address)bool'] | PollManagerArgs['tuple']['did_vote(uint64,address)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PollManagerParamsFactory.didVote(params))
      return {...result, return: result.return as unknown as (undefined | PollManagerReturns['did_vote(uint64,address)bool'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new PollManagerClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current PollManager app
   */
  state = {
    /**
     * Methods to access global state for the current PollManager app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          nextPollId: result.next_poll_id,
        }
      },
      /**
       * Get the current value of the next_poll_id key in global state
       */
      nextPollId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("next_poll_id")) as bigint | undefined },
    },
    /**
     * Methods to access box state for the current PollManager app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the box_map_struct map in box state
       */
      boxMapStruct: {
        /**
         * Get all current values of the box_map_struct map in box state
         */
        getMap: async (): Promise<Map<bigint, PollData>> => { return (await this.appClient.state.box.getMap("box_map_struct")) as Map<bigint, PollData> },
        /**
         * Get a current value of the box_map_struct map by key from box state
         */
        value: async (key: bigint | number): Promise<PollData | undefined> => { return await this.appClient.state.box.getMapValue("box_map_struct", key) as PollData | undefined },
      },
    },
  }

  public newGroup(): PollManagerComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a hello(string)string method call against the PollManager contract
       */
      hello(params: CallParams<PollManagerArgs['obj']['hello(string)string'] | PollManagerArgs['tuple']['hello(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.hello(params)))
        resultMappers.push((v) => client.decodeReturnValue('hello(string)string', v))
        return this
      },
      /**
       * Add a create_poll((uint64,string,string,string,string,string,string,uint64,uint64,uint64,uint64,uint64,address[]))void method call against the PollManager contract
       */
      createPoll(params: CallParams<PollManagerArgs['obj']['create_poll((uint64,string,string,string,string,string,string,uint64,uint64,uint64,uint64,uint64,address[]))void'] | PollManagerArgs['tuple']['create_poll((uint64,string,string,string,string,string,string,uint64,uint64,uint64,uint64,uint64,address[]))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createPoll(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a vote_option_1(uint64,address)void method call against the PollManager contract
       */
      voteOption_1(params: CallParams<PollManagerArgs['obj']['vote_option_1(uint64,address)void'] | PollManagerArgs['tuple']['vote_option_1(uint64,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.voteOption_1(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a vote_option_2(uint64,address)void method call against the PollManager contract
       */
      voteOption_2(params: CallParams<PollManagerArgs['obj']['vote_option_2(uint64,address)void'] | PollManagerArgs['tuple']['vote_option_2(uint64,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.voteOption_2(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a vote_option_3(uint64,address)void method call against the PollManager contract
       */
      voteOption_3(params: CallParams<PollManagerArgs['obj']['vote_option_3(uint64,address)void'] | PollManagerArgs['tuple']['vote_option_3(uint64,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.voteOption_3(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a vote_option_4(uint64,address)void method call against the PollManager contract
       */
      voteOption_4(params: CallParams<PollManagerArgs['obj']['vote_option_4(uint64,address)void'] | PollManagerArgs['tuple']['vote_option_4(uint64,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.voteOption_4(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a vote_option_5(uint64,address)void method call against the PollManager contract
       */
      voteOption_5(params: CallParams<PollManagerArgs['obj']['vote_option_5(uint64,address)void'] | PollManagerArgs['tuple']['vote_option_5(uint64,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.voteOption_5(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a did_vote(uint64,address)bool method call against the PollManager contract
       */
      didVote(params: CallParams<PollManagerArgs['obj']['did_vote(uint64,address)bool'] | PollManagerArgs['tuple']['did_vote(uint64,address)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.didVote(params)))
        resultMappers.push((v) => client.decodeReturnValue('did_vote(uint64,address)bool', v))
        return this
      },
      /**
       * Add a clear state call to the PollManager contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as PollManagerComposer
  }
}
export type PollManagerComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the hello(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  hello(params?: CallParams<PollManagerArgs['obj']['hello(string)string'] | PollManagerArgs['tuple']['hello(string)string']>): PollManagerComposer<[...TReturns, PollManagerReturns['hello(string)string'] | undefined]>

  /**
   * Calls the create_poll((uint64,string,string,string,string,string,string,uint64,uint64,uint64,uint64,uint64,address[]))void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createPoll(params?: CallParams<PollManagerArgs['obj']['create_poll((uint64,string,string,string,string,string,string,uint64,uint64,uint64,uint64,uint64,address[]))void'] | PollManagerArgs['tuple']['create_poll((uint64,string,string,string,string,string,string,uint64,uint64,uint64,uint64,uint64,address[]))void']>): PollManagerComposer<[...TReturns, PollManagerReturns['create_poll((uint64,string,string,string,string,string,string,uint64,uint64,uint64,uint64,uint64,address[]))void'] | undefined]>

  /**
   * Calls the vote_option_1(uint64,address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  voteOption_1(params?: CallParams<PollManagerArgs['obj']['vote_option_1(uint64,address)void'] | PollManagerArgs['tuple']['vote_option_1(uint64,address)void']>): PollManagerComposer<[...TReturns, PollManagerReturns['vote_option_1(uint64,address)void'] | undefined]>

  /**
   * Calls the vote_option_2(uint64,address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  voteOption_2(params?: CallParams<PollManagerArgs['obj']['vote_option_2(uint64,address)void'] | PollManagerArgs['tuple']['vote_option_2(uint64,address)void']>): PollManagerComposer<[...TReturns, PollManagerReturns['vote_option_2(uint64,address)void'] | undefined]>

  /**
   * Calls the vote_option_3(uint64,address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  voteOption_3(params?: CallParams<PollManagerArgs['obj']['vote_option_3(uint64,address)void'] | PollManagerArgs['tuple']['vote_option_3(uint64,address)void']>): PollManagerComposer<[...TReturns, PollManagerReturns['vote_option_3(uint64,address)void'] | undefined]>

  /**
   * Calls the vote_option_4(uint64,address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  voteOption_4(params?: CallParams<PollManagerArgs['obj']['vote_option_4(uint64,address)void'] | PollManagerArgs['tuple']['vote_option_4(uint64,address)void']>): PollManagerComposer<[...TReturns, PollManagerReturns['vote_option_4(uint64,address)void'] | undefined]>

  /**
   * Calls the vote_option_5(uint64,address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  voteOption_5(params?: CallParams<PollManagerArgs['obj']['vote_option_5(uint64,address)void'] | PollManagerArgs['tuple']['vote_option_5(uint64,address)void']>): PollManagerComposer<[...TReturns, PollManagerReturns['vote_option_5(uint64,address)void'] | undefined]>

  /**
   * Calls the did_vote(uint64,address)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  didVote(params?: CallParams<PollManagerArgs['obj']['did_vote(uint64,address)bool'] | PollManagerArgs['tuple']['did_vote(uint64,address)bool']>): PollManagerComposer<[...TReturns, PollManagerReturns['did_vote(uint64,address)bool'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the PollManager smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): PollManagerComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): PollManagerComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<PollManagerComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<PollManagerComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<PollManagerComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<PollManagerComposerResults<TReturns>>
}
export type PollManagerComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

