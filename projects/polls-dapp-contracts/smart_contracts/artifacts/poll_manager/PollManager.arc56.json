{
    "name": "PollManager",
    "structs": {
        "PollData": [
            {
                "name": "id",
                "type": "uint64"
            },
            {
                "name": "question",
                "type": "string"
            },
            {
                "name": "option_1",
                "type": "string"
            },
            {
                "name": "option_2",
                "type": "string"
            },
            {
                "name": "option_3",
                "type": "string"
            },
            {
                "name": "option_4",
                "type": "string"
            },
            {
                "name": "option_5",
                "type": "string"
            },
            {
                "name": "option_1_votes",
                "type": "uint64"
            },
            {
                "name": "option_2_votes",
                "type": "uint64"
            },
            {
                "name": "option_3_votes",
                "type": "uint64"
            },
            {
                "name": "option_4_votes",
                "type": "uint64"
            },
            {
                "name": "option_5_votes",
                "type": "uint64"
            },
            {
                "name": "voters",
                "type": "address[]"
            }
        ]
    },
    "methods": [
        {
            "name": "hello",
            "args": [
                {
                    "type": "string",
                    "name": "name"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "create_poll",
            "args": [
                {
                    "type": "(uint64,string,string,string,string,string,string,uint64,uint64,uint64,uint64,uint64,address[])",
                    "struct": "PollData",
                    "name": "poll_data"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "vote_option_1",
            "args": [
                {
                    "type": "uint64",
                    "name": "poll_id"
                },
                {
                    "type": "address",
                    "name": "caller"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "vote_option_2",
            "args": [
                {
                    "type": "uint64",
                    "name": "poll_id"
                },
                {
                    "type": "address",
                    "name": "caller"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "vote_option_3",
            "args": [
                {
                    "type": "uint64",
                    "name": "poll_id"
                },
                {
                    "type": "address",
                    "name": "caller"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "vote_option_4",
            "args": [
                {
                    "type": "uint64",
                    "name": "poll_id"
                },
                {
                    "type": "address",
                    "name": "caller"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "vote_option_5",
            "args": [
                {
                    "type": "uint64",
                    "name": "poll_id"
                },
                {
                    "type": "address",
                    "name": "caller"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "did_vote",
            "args": [
                {
                    "type": "uint64",
                    "name": "poll_id"
                },
                {
                    "type": "address",
                    "name": "caller"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 1
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "next_poll_id": {
                    "keyType": "AVMString",
                    "valueType": "uint64",
                    "key": "bmV4dF9wb2xsX2lk"
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "box_map_struct": {
                    "keyType": "uint64",
                    "valueType": "PollData",
                    "prefix": "cG9sbHM="
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        358,
                        435,
                        512,
                        606,
                        700
                    ],
                    "errorMessage": "Already voted"
                },
                {
                    "pc": [
                        827
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        126,
                        155,
                        173,
                        191,
                        209,
                        227,
                        245,
                        260
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        536,
                        630,
                        723
                    ],
                    "errorMessage": "Option doesn't exist in this poll"
                },
                {
                    "pc": [
                        295
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        129,
                        158,
                        176,
                        194,
                        212,
                        230,
                        248,
                        263
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        365,
                        442,
                        519,
                        613,
                        707,
                        793
                    ],
                    "errorMessage": "check self.box_map_struct entry exists"
                },
                {
                    "pc": [
                        320
                    ],
                    "errorMessage": "check self.next_poll_id exists"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiAEAQA8ICYEBXBvbGxzDG5leHRfcG9sbF9pZAIAAAQVH3x1MRhAAAwpgAgAAAAAAAAAAWcxG0EA5YIIBAK+zhEElXTZeARVAqebBEQ4WuUEprGfYQQXIFTbBNn6zC8EhpJqujYaAI4IAIgAeQBnAFUAQwAxAB8AAiNDMRkURDEYRDYaATYaAogCg4ABACNPAlQrTFCwIkMxGRREMRhENhoBNhoCiAIJIkMxGRREMRhENhoBNhoCiAGZIkMxGRREMRhENhoBNhoCiAEpIkMxGRREMRhENhoBNhoCiADKIkMxGRREMRhENhoBNhoCiABrIkMxGRREMRhENhoBiAA7IkMxGRREMRhENhoBVwIAiAAZSRUWVwYCTFArTFCwIkMxGUD/VTEYFEQiQ4oBAYAHSGVsbG8sIIv/UImKAQAjKWVEi/9LAVwAjP8oSwFQSbxIi/+/FyIIFilMZ4mKAgCL/ov/iAGpFEQoi/5QSb5ESYEUWyIIFlwUSwG8SEq/SSRZSwEVSwJLAk8CUlcCAIv/UEkVJQoWVwYCTFBPAiNPA1hMUEsBvEi/iYoCAIv+i/+IAVwURCiL/lBJvkRJgRxbIggWXBxLAbxISr9JJFlLARVLAksCTwJSVwIAi/9QSRUlChZXBgJMUE8CI08DWExQSwG8SL+JigIAi/6L/4gBDxREKIv+UEm+REmBDllLAYEQWUsCTgJSKhNESYEkWyIIFlwkSwG8SEq/SSRZSwEVSwJLAk8CUlcCAIv/UEkVJQoWVwYCTFBPAiNPA1hMUEsBvEi/iYoCAIv+i/+IALEURCiL/lBJvkRJgRBZSwGBEllLAk4CUioTREmBLFsiCBZcLEsBvEhKv0kkWUsBFUsCSwJPAlJXAgCL/1BJFSUKFlcGAkxQTwIjTwNYTFBLAbxIv4mKAgCL/ov/iABTFEQoi/5QSb5ESYESWUsBJFlLAk4CUioTREmBNFsiCBZcNEsBvEhKv0kkWUsBFUsCSwJPAlJXAgCL/1BJFSUKFlcGAkxQTwIjTwNYTFBLAbxIv4mKAgGAACMoi/5QvkRJJFlLARVSSSNZI4sEiwMMiwGMAEEAFIsCVwIAiwQlCyVYi/8SQQAEIowAiYsEIgiMBEL/1g==",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 10,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}